// This is a modified version of the original BoundingBox.idl from Autoware.
// The original is licensed under the Apache License, Version 2.0. For more information
// see the LICENSE file in the repository root
//
// The changes made in this file, of which a summary is listed below, are copyrighted:
//
// Copyright (C) 2021 by NavInfo Europe B.V. The Netherlands - All rights reserved
// Information classification: Confidential
// This content is protected by international copyright laws.
// Reproduction and distribution is prohibited without written permission.
//
// List of changes:
// * Renamed autoware_auto_msgs to aiim_autoware_msgs

#include "aiim_autoware_msgs/msg/Quaternion32.idl"
#include "geometry_msgs/msg/Point32.idl"

module aiim_autoware_msgs {
  module msg {
    typedef geometry_msgs::msg::Point32 geometry_msgs__msg__Point32;
    typedef geometry_msgs__msg__Point32 geometry_msgs__msg__Point32__4[4];
    typedef float float__8[8];
    module BoundingBox_Constants {
      const uint8 NO_LABEL = 0;
      const uint8 CAR = 1;
      const uint8 PEDESTRIAN = 2;
      const uint8 CYCLIST = 3;
      const uint8 MOTORCYCLE = 4;
      const uint8 NO_SIGNAL = 0;
      const uint8 LEFT_SIGNAL = 1;
      const uint8 RIGHT_SIGNAL = 2;
      const uint8 BRAKE = 3;
      const uint32 POSE_X = 0;
      const uint32 POSE_Y = 1;
      const uint32 VELOCITY = 2;
      const uint32 HEADING = 3;
      const uint32 TURN_RATE = 4;
      const uint32 SIZE_X = 5;
      const uint32 SIZE_Y = 6;
      const uint32 ACCELERATION = 7;
    };
    @verbatim (language="comment", text=
      " Oriented bounding box representation")
    struct BoundingBox {
      geometry_msgs::msg::Point32 centroid;

      geometry_msgs::msg::Point32 size;

      aiim_autoware_msgs::msg::Quaternion32 orientation;

      @default (value=0.0)
      float velocity;

      @default (value=0.0)
      float heading;

      @default (value=0.0)
      float heading_rate;

      geometry_msgs__msg__Point32__4 corners;

      float__8 variance;

      @verbatim (language="comment", text=
        " can hold arbitrary value, e.g. likelihood, area, perimeter")
      float value;

      @verbatim (language="comment", text=
        " can hold one of the vehicle constants defined below" "\n"
        " NO_LABEL as default value")
      @default (value=0)
      uint8 vehicle_label;

      @verbatim (language="comment", text=
        " can hold one of the signal constants defined below" "\n"
        " NO_SIGNAL as default value")
      @default (value=0)
      uint8 signal_label;

      @verbatim (language="comment", text=
        " Likelihood of vehicle label")
      float class_likelihood;
    };
  };
};
