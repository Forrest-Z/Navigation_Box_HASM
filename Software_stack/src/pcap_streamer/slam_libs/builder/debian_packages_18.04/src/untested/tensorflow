#!/bin/bash
# Copyright (C) 2020 by NavInfo Europe B.V. The Netherlands - All rights reserved
# Information classification: Confidential
# This content is protected by international copyright laws.
# Reproduction and distribution is prohibited without written permission.

# Exit on errors and undefined variables
set -euo pipefail

VERSION="1.12"
PKG_RELEASE="1" #Indicates the version of the generated package
ARCH=`uname -m` # x86_64 / aarch64
[[ "$ARCH" == "x86_64" ]] && PKG_ARCH="amd64"
[[ "$ARCH" == "aarch64" ]] && PKG_ARCH="arm64"
PKG_NAME="tensorflow_${VERSION}-${PKG_RELEASE}_${PKG_ARCH}"
ROOT_DIR=`pwd`
TF_ROOT="$ROOT_DIR/tensorflow"
DEB_OUTDIR="${TF_ROOT}/deb"
PIP_OUTDIR="${TF_ROOT}/pip"

WITH_TENSORRT=true
WITH_CUDA=true
CUDA_VERSION="10.0"
CUDNN_VERSION="7.0"
[[ "$ARCH" == "x86_64" ]] && COMPUTE_CAPABILITIES="7.5,6.1,5.2"
[[ "$ARCH" == "aarch64" && "$CUDA_VERSION" == "10.0" ]] && COMPUTE_CAPABILITIES="7.2"
[[ "$ARCH" == "aarch64" && "$CUDA_VERSION" == "9.0" ]] && COMPUTE_CAPABILITIES="6.2,5.3"

[[ ! `whoami` == "root" ]] && {
    echo "** Please use root user ('sudo su')!"
    exit
}

[[ "$ARCH" == "x86_64" ]]  && CONFIG_PARAM="-c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 --config=opt"
[[ "$ARCH" == "aarch64" ]] && CONFIG_PARAM="-c opt --copt=-DPNG_ARM_NEON_OPT=0 --jobs=4 --config=opt"

if ${WITH_CUDA}; then
    echo
    echo "** Building with CUDA support."
    echo

    CONFIG_PARAM="$CONFIG_PARAM --config=cuda"
    GPU_PARAM="--gpu"
    export TF_NEED_CUDA=1

    export TF_CUDA_VERSION=${CUDA_VERSION}
    export CUDA_TOOLKIT_PATH=/usr/local/cuda-${CUDA_VERSION}
    export TF_CUDNN_VERSION=${CUDNN_VERSION}
    [[ "$ARCH" == "x86_64" ]]  && export CUDNN_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
    [[ "$ARCH" == "aarch64" ]] && export CUDNN_INSTALL_PATH=/usr/lib/aarch64-linux-gnu

    export TF_CUDA_COMPUTE_CAPABILITIES=${COMPUTE_CAPABILITIES}
    export TF_CUDA_CLANG=0
else

    echo
    echo "** Building without CUDA support."
    echo

    GPU_PARAM=""
    export TF_NEED_CUDA=0
fi

if ${WITH_TENSORRT}; then
    echo
    echo "** Building with TensorRT."
    echo

    export TF_NEED_TENSORRT=1
    [[ "$ARCH" == "x86_64" ]]  && export TENSORRT_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
    [[ "$ARCH" == "aarch64" ]] && export TENSORRT_INSTALL_PATH=/usr/lib/aarch64-linux-gnu
else

    echo
    echo "** Building without TensorRT."
    echo

    export TF_NEED_TENSORRT=0
fi

echo ""
echo "##################################################################"
echo "################# Install dependencies ###########################"
echo "##################################################################"
echo ""

PROTOBUF_VERSION="3.6.0"
[[ ! `protoc --version` == "libprotoc $PROTOBUF_VERSION" ]] && {
    echo "TF $VERSION needs to be built with Protobuf $PROTOBUF_VERSION"
    exit 1
}

[[ ! -d "/usr/local/include/eigen3" ]] && {
    echo "TF $VERSION needs to be built with Eigen 3.3"
    exit 1
}

apt install -y autoconf automake libtool curl make g++ unzip
apt install -y bash-completion
apt install -y python-numpy python-dev python-wheel python-setuptools python-pip
apt install -y python3-numpy python3-dev python3-wheel python3-setuptools python3-pip
apt install -y swig libxmu-dev libxi-dev

apt install -y software-properties-common debconf-utils
add-apt-repository -y ppa:webupd8team/java
set +e # APT update fails due to some non-signed PPAs
apt update
set -e
echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections
sudo apt-get install -y oracle-java8-installer

pip install mock
pip install six
pip install keras_applications==1.0.6 --no-deps
pip install keras_preprocessing==1.0.5 --no-deps

pip3 install mock
pip3 install six
pip3 install keras_applications==1.0.6 --no-deps
pip3 install keras_preprocessing==1.0.5 --no-deps

[[ ! -f "/usr/local/include/nsync.h" ]] && {
    cd "$ROOT_DIR"
    git clone https://github.com/google/nsync/
    cd nsync
    git checkout v1.18
    mkdir build
    cd build
    cmake ..
    make
    sudo make install
}

BAZEL_VERSION="0.15.2"
[[ ! `bazel version | grep $BAZEL_VERSION` ]] && {
    [[ "$ARCH" == "x86_64" ]] && {
        cd "$ROOT_DIR"
        wget -nc "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel_${BAZEL_VERSION}-linux-x86_64.deb"
        sudo dpkg -i "bazel_${BAZEL_VERSION}-linux-x86_64.deb"
    }
    [[ "$ARCH" == "aarch64" ]] && {
        cd "$ROOT_DIR"
        wget "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip"
        mkdir bazel
        cd bazel
        unzip "../bazel-${BAZEL_VERSION}-dist.zip"
        bash compile.sh
        sudo cp -P ./output/bazel /usr/local/bin/ -v
    }
}

echo ""
echo "##################################################################"
echo "################### Cloning TensorFlow ###########################"
echo "##################################################################"
echo ""

cd "$ROOT_DIR"
git clone https://github.com/tensorflow/tensorflow
cd tensorflow
git checkout r$VERSION

#Build for python 2 and python 3
for python_version in python2 python3; do

    cd $TF_ROOT

    echo ""
    echo "##################################################################"
    echo "###### Configuring TensorFlow for Python version: "${python_version}" ########"
    echo "##################################################################"
    echo ""

    export PYTHON_BIN_PATH=$(which ${python_version})
    export PYTHON_LIB_PATH="$($PYTHON_BIN_PATH -c 'import site; print(site.getsitepackages()[0])')"

    export TF_NEED_IGNITE=0
    export TF_ENABLE_XLA=0
    export TF_NEED_OPENCL_SYCL=0
    export TF_NEED_ROCM=0

    export TF_NCCL_VERSION="1.3"

    export GCC_HOST_COMPILER_PATH=$(which gcc)
    export TF_NEED_MPI=0
    export CC_OPT_FLAGS="-march=native"
    export TF_SET_ANDROID_WORKSPACE=0

    ./configure

    echo ""
    echo "##################################################################"
    echo "############### Building pip package creator #####################"
    echo "##################################################################"
    echo ""

    bazel clean

    bazel build ${CONFIG_PARAM} //tensorflow/tools/pip_package:build_pip_package

    echo ""
    echo "##################################################################"
    echo "################# Creating pip package ###########################"
    echo "##################################################################"
    echo ""

    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package ${PIP_OUTDIR}/${python_version} ${GPU_PARAM}
done

echo ""
echo "##################################################################"
echo "################ Building c++ libraries ##########################"
echo "##################################################################"
echo ""

bazel build ${CONFIG_PARAM} --config=monolithic //tensorflow:libtensorflow.so

bazel build ${CONFIG_PARAM} --config=monolithic //tensorflow:libtensorflow_cc.so

bazel build ${CONFIG_PARAM} --config=monolithic //tensorflow:libtensorflow_framework.so

echo ""
echo "##################################################################"
echo "################# Creating debian package ########################"
echo "##################################################################"
echo ""

if [ -d "$DEB_OUTDIR" ]; then rm -r ${DEB_OUTDIR}; fi
mkdir -p ${DEB_OUTDIR}/$PKG_NAME
cd ${DEB_OUTDIR}

#Copy the libraries
LIB_DIR=$PKG_NAME/usr/local/lib
mkdir -p $LIB_DIR
sudo cp ${TF_ROOT}/bazel-bin/tensorflow/libtensorflow.so $LIB_DIR
sudo cp ${TF_ROOT}/bazel-bin/tensorflow/libtensorflow_cc.so $LIB_DIR
sudo cp ${TF_ROOT}/bazel-bin/tensorflow/libtensorflow_framework.so $LIB_DIR

#Copy generated headers
HEADERS_DIR=$PKG_NAME/usr/local/include/google/tensorflow
mkdir -p $HEADERS_DIR
cp -r ${TF_ROOT}/tensorflow $HEADERS_DIR/
find $HEADERS_DIR/tensorflow -type f ! -name "*.h" -delete

#Copy all generated files from bazel-genfiles
cp ${TF_ROOT}/bazel-genfiles/tensorflow/core/framework/*.h $HEADERS_DIR/tensorflow/core/framework
cp ${TF_ROOT}/bazel-genfiles/tensorflow/core/lib/core/*.h $HEADERS_DIR/tensorflow/core/lib/core
cp ${TF_ROOT}/bazel-genfiles/tensorflow/core/protobuf/*.h $HEADERS_DIR/tensorflow/core/protobuf
cp ${TF_ROOT}/bazel-genfiles/tensorflow/core/util/*.h $HEADERS_DIR/tensorflow/core/util
cp ${TF_ROOT}/bazel-genfiles/tensorflow/cc/ops/*.h $HEADERS_DIR/tensorflow/cc/ops

#Copy the eigen3 directory
mkdir -p $HEADERS_DIR/third_party/
cp -r ${TF_ROOT}/third_party/eigen3 $HEADERS_DIR/third_party/

#Clean headers directory by removing all empty directories
find $HEADERS_DIR -type d -empty -delete

#Configure the package meta data
mkdir -p $PKG_NAME/DEBIAN
CONTROL=$PKG_NAME/DEBIAN/control
echo "Package: tensorflow" >> $CONTROL
echo "Version: ${VERSION}-${PKG_RELEASE}" >> $CONTROL
echo "Architecture: ${PKG_ARCH}" >> $CONTROL
echo "Maintainer: IT Navinfo" >> $CONTROL
echo "Description: NavInfo compiled package" >> $CONTROL

#Create the package
dpkg-deb --build $PKG_NAME
